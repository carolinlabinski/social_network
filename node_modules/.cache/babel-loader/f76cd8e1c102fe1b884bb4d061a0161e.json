{"ast":null,"code":"import axios from \"axios\";\nimport { API } from \"../redux/posts/types\";\nimport { apiEnd, apiStart, apiError } from \"../redux/posts/api\";\n\nconst apiMiddleware = ({\n  dispatch\n}) => next => action => {\n  next(action);\n\n  if (action.type !== API) {\n    // only apply middleware to actions of type API\n    return;\n  }\n\n  const {\n    url,\n    method,\n    data,\n    onSuccess,\n    onFailure,\n    label\n  } = action.payload; // Adds support to POST and PUT requests with data\n\n  const dataOrParams = [\"GET\", \"DELETE\"].includes(method) ? \"params\" : \"data\"; // axios configs\n\n  axios.defaults.baseURL = process.env.REACT_APP_BASE_URL || \"\";\n  axios.defaults.headers.common[\"Content-Type\"] = \"application/json\";\n\n  if (label) {\n    dispatch(apiStart(label)); // Action to notify that the api call is starting.\n  }\n\n  axios.request({\n    url,\n    method,\n    [dataOrParams]: data\n  }).then(({\n    data\n  }) => {\n    dispatch(onSuccess(data));\n  }).catch(error => {\n    dispatch(apiError(error)); // Original apiAction executor's error handler. e.g. Fn passed inside fetchPosts action.\n\n    dispatch(onFailure(error));\n  }).finally(() => {\n    if (label) {\n      // Action to notify that the api call has ended.\n      dispatch(apiEnd(label));\n    }\n  });\n};\n\nexport default apiMiddleware;","map":{"version":3,"sources":["/Users/carolinlabinski/Documents/THP_next/sem8/mini_social_network/src/middleware/index.js"],"names":["axios","API","apiEnd","apiStart","apiError","apiMiddleware","dispatch","next","action","type","url","method","data","onSuccess","onFailure","label","payload","dataOrParams","includes","defaults","baseURL","process","env","REACT_APP_BASE_URL","headers","common","request","then","catch","error","finally"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,sBAApB;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,QAA3B,QAA2C,oBAA3C;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmBC,IAAD,IAAWC,MAAD,IAAY;AAC7DD,EAAAA,IAAI,CAACC,MAAD,CAAJ;;AAEA,MAAIA,MAAM,CAACC,IAAP,KAAgBR,GAApB,EAAyB;AACxB;AACA;AACA;;AAED,QAAM;AAAES,IAAAA,GAAF;AAAOC,IAAAA,MAAP;AAAeC,IAAAA,IAAf;AAAqBC,IAAAA,SAArB;AAAgCC,IAAAA,SAAhC;AAA2CC,IAAAA;AAA3C,MAAqDP,MAAM,CAACQ,OAAlE,CAR6D,CAU7D;;AACA,QAAMC,YAAY,GAAG,CAAC,KAAD,EAAQ,QAAR,EAAkBC,QAAlB,CAA2BP,MAA3B,IAAqC,QAArC,GAAgD,MAArE,CAX6D,CAa7D;;AACAX,EAAAA,KAAK,CAACmB,QAAN,CAAeC,OAAf,GAAyBC,OAAO,CAACC,GAAR,CAAYC,kBAAZ,IAAkC,EAA3D;AACAvB,EAAAA,KAAK,CAACmB,QAAN,CAAeK,OAAf,CAAuBC,MAAvB,CAA8B,cAA9B,IAAgD,kBAAhD;;AAEA,MAAIV,KAAJ,EAAW;AACVT,IAAAA,QAAQ,CAACH,QAAQ,CAACY,KAAD,CAAT,CAAR,CADU,CACiB;AAC3B;;AAEDf,EAAAA,KAAK,CACH0B,OADF,CACU;AACRhB,IAAAA,GADQ;AAERC,IAAAA,MAFQ;AAGR,KAACM,YAAD,GAAgBL;AAHR,GADV,EAMEe,IANF,CAMO,CAAC;AAAEf,IAAAA;AAAF,GAAD,KAAc;AACnBN,IAAAA,QAAQ,CAACO,SAAS,CAACD,IAAD,CAAV,CAAR;AACA,GARF,EASEgB,KATF,CASSC,KAAD,IAAW;AACjBvB,IAAAA,QAAQ,CAACF,QAAQ,CAACyB,KAAD,CAAT,CAAR,CADiB,CAEjB;;AACAvB,IAAAA,QAAQ,CAACQ,SAAS,CAACe,KAAD,CAAV,CAAR;AACA,GAbF,EAcEC,OAdF,CAcU,MAAM;AACd,QAAIf,KAAJ,EAAW;AACV;AACAT,MAAAA,QAAQ,CAACJ,MAAM,CAACa,KAAD,CAAP,CAAR;AACA;AACD,GAnBF;AAoBA,CAzCD;;AA2CA,eAAeV,aAAf","sourcesContent":["import axios from \"axios\";\nimport { API } from \"../redux/posts/types\";\nimport { apiEnd, apiStart, apiError } from \"../redux/posts/api\";\n\nconst apiMiddleware = ({ dispatch }) => (next) => (action) => {\n\tnext(action);\n\n\tif (action.type !== API) {\n\t\t// only apply middleware to actions of type API\n\t\treturn;\n\t}\n\n\tconst { url, method, data, onSuccess, onFailure, label } = action.payload;\n\n\t// Adds support to POST and PUT requests with data\n\tconst dataOrParams = [\"GET\", \"DELETE\"].includes(method) ? \"params\" : \"data\";\n\n\t// axios configs\n\taxios.defaults.baseURL = process.env.REACT_APP_BASE_URL || \"\";\n\taxios.defaults.headers.common[\"Content-Type\"] = \"application/json\";\n\n\tif (label) {\n\t\tdispatch(apiStart(label)); // Action to notify that the api call is starting.\n\t}\n\n\taxios\n\t\t.request({\n\t\t\turl,\n\t\t\tmethod,\n\t\t\t[dataOrParams]: data,\n\t\t})\n\t\t.then(({ data }) => {\n\t\t\tdispatch(onSuccess(data));\n\t\t})\n\t\t.catch((error) => {\n\t\t\tdispatch(apiError(error));\n\t\t\t// Original apiAction executor's error handler. e.g. Fn passed inside fetchPosts action.\n\t\t\tdispatch(onFailure(error));\n\t\t})\n\t\t.finally(() => {\n\t\t\tif (label) {\n\t\t\t\t// Action to notify that the api call has ended.\n\t\t\t\tdispatch(apiEnd(label));\n\t\t\t}\n\t\t});\n};\n\nexport default apiMiddleware;\n"]},"metadata":{},"sourceType":"module"}